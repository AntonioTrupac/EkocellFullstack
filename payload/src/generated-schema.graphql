type Query {
  Todo(id: String!, draft: Boolean): Todo
  Todos(where: Todo_where, draft: Boolean, page: Int, limit: Int, sort: String): Todos
  User(id: String!, draft: Boolean): User
  Users(where: User_where, draft: Boolean, page: Int, limit: Int, sort: String): Users
  meUser: usersMe
  initializedUser: Boolean
  Preference(key: String): Preference
  Access: Access
}

type Todo {
  id: String
  createdAt: DateTime!
  updatedAt: DateTime!
  listName: String
  tasks: [Todo_Tasks!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Todo_Tasks {
  name: String
  complete: Boolean
  id: String
}

type Todos {
  docs: [Todo]
  totalDocs: Int
  offset: Int
  limit: Int
  totalPages: Int
  page: Int
  pagingCounter: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  prevPage: Int
  nextPage: Int
}

input Todo_where {
  listName: Todo_listName_operator
  tasks__name: Todo_tasks__name_operator
  tasks__complete: Todo_tasks__complete_operator
  tasks__id: Todo_tasks__id_operator
  id: Todo_id_operator
  createdAt: Todo_createdAt_operator
  updatedAt: Todo_updatedAt_operator
  OR: [Todo_where_or]
  AND: [Todo_where_and]
}

input Todo_listName_operator {
  equals: String
  not_equals: String
  like: String
  contains: String
  exists: Boolean
}

input Todo_tasks__name_operator {
  equals: String
  not_equals: String
  like: String
  contains: String
  exists: Boolean
}

input Todo_tasks__complete_operator {
  equals: Boolean
  not_equals: Boolean
  exists: Boolean
}

input Todo_tasks__id_operator {
  equals: String
  not_equals: String
  like: String
  contains: String
  exists: Boolean
}

input Todo_id_operator {
  equals: JSON
  not_equals: JSON
  in: [JSON]
  not_in: [JSON]
  all: [JSON]
  exists: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input Todo_createdAt_operator {
  equals: DateTime
  not_equals: DateTime
  greater_than_equal: DateTime
  greater_than: DateTime
  less_than_equal: DateTime
  less_than: DateTime
  like: DateTime
  exists: Boolean
}

input Todo_updatedAt_operator {
  equals: DateTime
  not_equals: DateTime
  greater_than_equal: DateTime
  greater_than: DateTime
  less_than_equal: DateTime
  less_than: DateTime
  like: DateTime
  exists: Boolean
}

input Todo_where_or {
  listName: Todo_listName_operator
  tasks__name: Todo_tasks__name_operator
  tasks__complete: Todo_tasks__complete_operator
  tasks__id: Todo_tasks__id_operator
  id: Todo_id_operator
  createdAt: Todo_createdAt_operator
  updatedAt: Todo_updatedAt_operator
}

input Todo_where_and {
  listName: Todo_listName_operator
  tasks__name: Todo_tasks__name_operator
  tasks__complete: Todo_tasks__complete_operator
  tasks__id: Todo_tasks__id_operator
  id: Todo_id_operator
  createdAt: Todo_createdAt_operator
  updatedAt: Todo_updatedAt_operator
}

type User {
  id: String
  createdAt: DateTime!
  updatedAt: DateTime!
  email: EmailAddress
  resetPasswordToken: String
  resetPasswordExpiration: DateTime
  loginAttempts: Float
  lockUntil: DateTime
  password: String!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

type Users {
  docs: [User]
  totalDocs: Int
  offset: Int
  limit: Int
  totalPages: Int
  page: Int
  pagingCounter: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  prevPage: Int
  nextPage: Int
}

input User_where {
  email: User_email_operator
  id: User_id_operator
  createdAt: User_createdAt_operator
  updatedAt: User_updatedAt_operator
  OR: [User_where_or]
  AND: [User_where_and]
}

input User_email_operator {
  equals: EmailAddress
  not_equals: EmailAddress
  like: EmailAddress
  contains: EmailAddress
  exists: Boolean
}

input User_id_operator {
  equals: JSON
  not_equals: JSON
  in: [JSON]
  not_in: [JSON]
  all: [JSON]
  exists: Boolean
}

input User_createdAt_operator {
  equals: DateTime
  not_equals: DateTime
  greater_than_equal: DateTime
  greater_than: DateTime
  less_than_equal: DateTime
  less_than: DateTime
  like: DateTime
  exists: Boolean
}

input User_updatedAt_operator {
  equals: DateTime
  not_equals: DateTime
  greater_than_equal: DateTime
  greater_than: DateTime
  less_than_equal: DateTime
  less_than: DateTime
  like: DateTime
  exists: Boolean
}

input User_where_or {
  email: User_email_operator
  id: User_id_operator
  createdAt: User_createdAt_operator
  updatedAt: User_updatedAt_operator
}

input User_where_and {
  email: User_email_operator
  id: User_id_operator
  createdAt: User_createdAt_operator
  updatedAt: User_updatedAt_operator
}

type usersMe {
  token: String
  user: User
  exp: Int
  collection: String
}

type Preference {
  key: String!
  value: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Access {
  canAccessAdmin: Boolean!
  todos: TodoAccess
  users: UserAccess
}

type TodoAccess {
  fields: TodoFields
  create: TodoCreateAccess
  read: TodoReadAccess
  update: TodoUpdateAccess
  delete: TodoDeleteAccess
}

type TodoFields {
  listName: TodoFields_listName
  tasks: TodoFields_tasks
}

type TodoFields_listName {
  create: TodoFields_listName_Create
  read: TodoFields_listName_Read
  update: TodoFields_listName_Update
  delete: TodoFields_listName_Delete
}

type TodoFields_listName_Create {
  permission: Boolean!
}

type TodoFields_listName_Read {
  permission: Boolean!
}

type TodoFields_listName_Update {
  permission: Boolean!
}

type TodoFields_listName_Delete {
  permission: Boolean!
}

type TodoFields_tasks {
  create: TodoFields_tasks_Create
  read: TodoFields_tasks_Read
  update: TodoFields_tasks_Update
  delete: TodoFields_tasks_Delete
  fields: TodoFields_tasks_Fields
}

type TodoFields_tasks_Create {
  permission: Boolean!
}

type TodoFields_tasks_Read {
  permission: Boolean!
}

type TodoFields_tasks_Update {
  permission: Boolean!
}

type TodoFields_tasks_Delete {
  permission: Boolean!
}

type TodoFields_tasks_Fields {
  name: TodoFields_tasks_name
  complete: TodoFields_tasks_complete
  id: TodoFields_tasks_id
}

type TodoFields_tasks_name {
  create: TodoFields_tasks_name_Create
  read: TodoFields_tasks_name_Read
  update: TodoFields_tasks_name_Update
  delete: TodoFields_tasks_name_Delete
}

type TodoFields_tasks_name_Create {
  permission: Boolean!
}

type TodoFields_tasks_name_Read {
  permission: Boolean!
}

type TodoFields_tasks_name_Update {
  permission: Boolean!
}

type TodoFields_tasks_name_Delete {
  permission: Boolean!
}

type TodoFields_tasks_complete {
  create: TodoFields_tasks_complete_Create
  read: TodoFields_tasks_complete_Read
  update: TodoFields_tasks_complete_Update
  delete: TodoFields_tasks_complete_Delete
}

type TodoFields_tasks_complete_Create {
  permission: Boolean!
}

type TodoFields_tasks_complete_Read {
  permission: Boolean!
}

type TodoFields_tasks_complete_Update {
  permission: Boolean!
}

type TodoFields_tasks_complete_Delete {
  permission: Boolean!
}

type TodoFields_tasks_id {
  create: TodoFields_tasks_id_Create
  read: TodoFields_tasks_id_Read
  update: TodoFields_tasks_id_Update
  delete: TodoFields_tasks_id_Delete
}

type TodoFields_tasks_id_Create {
  permission: Boolean!
}

type TodoFields_tasks_id_Read {
  permission: Boolean!
}

type TodoFields_tasks_id_Update {
  permission: Boolean!
}

type TodoFields_tasks_id_Delete {
  permission: Boolean!
}

type TodoCreateAccess {
  permission: Boolean!
  where: JSONObject
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type TodoReadAccess {
  permission: Boolean!
  where: JSONObject
}

type TodoUpdateAccess {
  permission: Boolean!
  where: JSONObject
}

type TodoDeleteAccess {
  permission: Boolean!
  where: JSONObject
}

type UserAccess {
  fields: UserFields
  create: UserCreateAccess
  read: UserReadAccess
  update: UserUpdateAccess
  delete: UserDeleteAccess
  unlock: UserUnlockAccess
}

type UserFields {
  email: UserFields_email
  password: UserFields_password
}

type UserFields_email {
  create: UserFields_email_Create
  read: UserFields_email_Read
  update: UserFields_email_Update
  delete: UserFields_email_Delete
}

type UserFields_email_Create {
  permission: Boolean!
}

type UserFields_email_Read {
  permission: Boolean!
}

type UserFields_email_Update {
  permission: Boolean!
}

type UserFields_email_Delete {
  permission: Boolean!
}

type UserFields_password {
  create: UserFields_password_Create
  read: UserFields_password_Read
  update: UserFields_password_Update
  delete: UserFields_password_Delete
}

type UserFields_password_Create {
  permission: Boolean!
}

type UserFields_password_Read {
  permission: Boolean!
}

type UserFields_password_Update {
  permission: Boolean!
}

type UserFields_password_Delete {
  permission: Boolean!
}

type UserCreateAccess {
  permission: Boolean!
  where: JSONObject
}

type UserReadAccess {
  permission: Boolean!
  where: JSONObject
}

type UserUpdateAccess {
  permission: Boolean!
  where: JSONObject
}

type UserDeleteAccess {
  permission: Boolean!
  where: JSONObject
}

type UserUnlockAccess {
  permission: Boolean!
  where: JSONObject
}

type Mutation {
  createTodo(data: mutationTodoInput!, draft: Boolean): Todo
  updateTodo(id: String!, data: mutationTodoUpdateInput!, draft: Boolean, autosave: Boolean): Todo
  deleteTodo(id: String!): Todo
  createUser(data: mutationUserInput!, draft: Boolean): User
  updateUser(id: String!, data: mutationUserUpdateInput!, draft: Boolean, autosave: Boolean): User
  deleteUser(id: String!): User
  refreshTokenUser(token: String): usersRefreshedUser
  logoutUser: String
  unlockUser(email: String!): Boolean!
  loginUser(email: String, password: String): usersLoginResult
  forgotPasswordUser(email: String!, disableEmail: Boolean, expiration: Int): Boolean!
  resetPasswordUser(token: String, password: String): usersResetPassword
  verifyEmailUser(token: String): Boolean
  updatePreference(key: String!, value: JSON): Preference
  deletePreference(key: String!): Preference
}

input mutationTodoInput {
  listName: String
  tasks: [mutationTodo_TasksInput]
}

input mutationTodo_TasksInput {
  name: String
  complete: Boolean
  id: String
}

input mutationTodoUpdateInput {
  listName: String
  tasks: [mutationTodoUpdate_TasksInput]
}

input mutationTodoUpdate_TasksInput {
  name: String
  complete: Boolean
  id: String
}

input mutationUserInput {
  email: String
  resetPasswordToken: String
  resetPasswordExpiration: String
  loginAttempts: Float
  lockUntil: String
  password: String!
}

input mutationUserUpdateInput {
  email: String
  resetPasswordToken: String
  resetPasswordExpiration: String
  loginAttempts: Float
  lockUntil: String
  password: String
}

type usersRefreshedUser {
  user: usersJWT
  refreshedToken: String
  exp: Int
}

type usersJWT {
  email: EmailAddress!
  collection: String!
}

type usersLoginResult {
  token: String
  user: User
  exp: Int
}

type usersResetPassword {
  token: String
  user: User
}
